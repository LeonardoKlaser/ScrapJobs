# docker-compose.local.yml

services:
  localstack:
    container_name: localstack_main
    image: localstack/localstack:latest
    ports:
      - "127.0.0.1:4566:4566"  
      - "127.0.0.1:4510-4559:4510-4559"       
    environment:
      - SERVICES=cloudwatch,ses,sns,secretsmanager,s3 
      - GATEWAY_LISTEN=0.0.0.0:4566 
      - UI_BACKEND_URL=http://localhost:4566 
      - DEBUG=0
    volumes:
      - "./.volume:/var/lib/localstack" 
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - go_network

  api:
    container_name: go_scrapper_api_local
    build: . 
    command: /app/api 
    env_file:
      - .env 
    ports:
      - "8080:8080"
    depends_on:
      go_scrapper_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - go_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "autoheal=true"
  
  worker:
    container_name: go_scrapper_worker_local
    build: .
    command: /app/worker  
    env_file:
      - .env
    depends_on:
      go_scrapper_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - go_network
    healthcheck:
      test: ["CMD-SHELL", "pgrep worker || exit 1"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "autoheal=true"

  scheduler:
    container_name: go_scrapper_scheduler_local
    build: .
    command: /app/scheduler 
    env_file:
      - .env
    depends_on:
      go_scrapper_db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - go_network
    labels:
      - "autoheal=true"
  
  archive-monitor: 
    container_name: go_scrapper_archive_monitor 
    build: .
    command: /app/archive-monitor 
    env_file:
      - .env
    depends_on: 
      redis:
        condition: service_healthy 
      localstack: 
        condition: service_healthy
    networks:
      - go_network
    labels:
      - "autoheal=true"

  go_scrapper_db:
    container_name: go_scrapper_db_local
    image: postgres:14-alpine
    ports:
      - "5433:5432" 
    environment:
      - POSTGRES_USER=${USER_DB}
      - POSTGRES_PASSWORD=${PASSWORD_DB}
      - POSTGRES_DB=${DBNAME}
    volumes:
      - pgdata_local:/var/lib/postgresql/data
    networks:
      - go_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
  redis:
    container_name: redis_local
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redisdata_local:/data
    networks:
      - go_network
    healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - go_network
    depends_on:
      - redis  

  migrate:
    build: . 
    env_file:
      - .env
    depends_on:
      go_scrapper_db:
        condition: service_healthy
    networks:
      - go_network
    command: >
      /app/migrate -path /app/migrations -database "postgres://${USER_DB}:${PASSWORD_DB}@go_scrapper_db_local:5432/${DBNAME}?sslmode=disable" up
  
  autoheal:
    image: willfarrell/autoheal
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=autoheal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - go_network

networks:
  go_network:
    driver: bridge

volumes:
  pgdata_local: {}
  redisdata_local: {}