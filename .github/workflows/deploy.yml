name: Deploy ScrapJobs

on:
  push:
    branches:
      - main
    paths:
      #- '**.go'         
      #- 'go.mod'
      - 'go.sum'
      #- 'Dockerfile'

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write 
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AwS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        ECR_REPOSITORY: scrapjobs-repo
        IMAGE_TAG: ${{github.sha}}
      run: |
        docker build -t  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to EC2 via SSM
      run: |
        aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "Deploying ScrapJobs version ${{github.sha}}" \
          --parameters 'commands=[
            "cd /home/ec2-user",
            "mkdir -p app",
            "cd app",
            "echo IMAGE_NAME=${{ steps.build-image.outputs.image }} > .env",
            "echo GIN_MODE=release >> .env",
            "echo APP_SECRET_NAME=ScrapJobs-db-credentials >> .env",
            "echo JWTTOKEN=${{ secrets.JWT_TOKEN }} >> .env",
            "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
            "docker-compose pull",
            "docker-compose run --rm migrate",
            "docker-compose up -d api worker scheduler archive-monitor",
            "docker image prune -af"
          ]'