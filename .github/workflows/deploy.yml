name: Deploy ScrapJobs

on:
  push:
    branches:
      - main
    paths:
      - '**.go'         
      - 'go.mod'
      - 'go.sum'
      - 'Dockerfile'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AwS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
        ECR_REPOSITORY: scrapjobs-repo
        IMAGE_TAG: ${{github.sha}}
      run: |
        docker build -t  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_IP}}
        username: ec2-user
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script:
          mkdir -p ~/app && cd ~/app

          echo "IMAGE_NAME=${{ steps.build-image.outputs.image }}" > .env
          echo "GIN_MODE=release" >> .env
          echo "APP_SECRET_NAME=ScrapJobs-db-credentials" >> .env

          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

          docker-compose pull
          docker-compose run --rm migrate
          docker-compose up -d api worker scheduler redis go_scrapper_db
          docker image prune -af